stages:
  - build
  - test
  - deploy
  - sonarqube
  - release

image: python:3.8-slim-buster
before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -e .

build:
  stage: build
  script:
    - python -m build    

test:
  stage: test
  script:
    - pytest --cov=src/treevolution

pages:
  stage: deploy
  script:
   - sphinx-build -b html docs/source/  public
  artifacts:
    paths:
    - public
  rules:
      - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created
  before_script:
    - echo "Prepare new release"
  script:
    - echo "Running release_job"
  release: # See https://docs.gitlab.com/ee/ci/yaml/#release
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'


sonarqube-check:
  stage: sonarqube
  image: 
    name: rawshark/python-sonar-scanner:3.8
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - pip install -e .
    - pytest -v -o junit_family=xunit1 --cov=src
      --cov-report xml:tests/coverage.xml
      --junitxml=tests/nosetests.xml
    - pylint --exit-zero --disable=C0303,R0902
      --output pylint-report.txt src
    - sonar-scanner -Dsonar.qualitygate.wait=true
  only:
    - master # or the name of your main branch
    - develop

